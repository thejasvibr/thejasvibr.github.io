<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Thejasvi Beleyur (Posts about Python, scientific computing)</title><link>https://thejasvibr.github.io/</link><description></description><atom:link href="https://thejasvibr.github.io/categories/cat_python-scientific-computing.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents Â© 2020 &lt;a href="mailto:thejasvib@gmail.com"&gt;Thejasvi Beleyur&lt;/a&gt; </copyright><lastBuildDate>Sun, 03 May 2020 20:28:07 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>The coding language maketh not the science, but...</title><link>https://thejasvibr.github.io/blog/the_programming_language/</link><dc:creator>Thejasvi Beleyur</dc:creator><description>&lt;div&gt;&lt;p&gt;When it comes to choice  of  programming language to get any task done,  people can sometimes have strong opinions. &lt;!-- TEASER-END --&gt;
I've seen tweets from authors reporting reviewers who wanted the stats/plots/something done in R, and being dismissive of it 
being done in any  other language. This is truly ridiculous, and this kind of attitude amounts to a weird, unhealthy kind 
of gate-keeping. What will come next, oh the code is only  compatible with a Windows OS, it should have been developed keeping 
a Unix OS in mind...or even more specific comments about which packages to use?&lt;/p&gt;
&lt;p&gt;The point is, there is a feeling some members of the community have that certain computational tasks are well suited to be done 
with &lt;em&gt;insert favouriteprogramminglanguage&lt;/em&gt;. I find this attitude absurd and take it to be a form of irrational favoritism. If 
a piece of code is not in a coding language I use regularly, the only thing it means is that I may  not be familiar  with 
a whole bunch of cool concepts and ideas that the authors use. It doesn't mean the work is sub-standard. This argument cuts 
both ways, whether the language is an open-source or proprietary platform. If anything at all, if I have to read code written 
in an unfamiliar language and understand it - it needs to be well-documented! The user/reader needs  to understand what  is 
happening in the code irrespective of the actual for and while loops running under the hood.&lt;/p&gt;
&lt;p&gt;Documenting code well is not a trivial task,  and not something which can be done well over a couple of days. The closest task to documenting a codebase
 is writing a (scientific) manuscript. Things keep changing, you realise a bunch of things over a series of iterations, and 
even then there may be details lying around from the time you actually created the manuscript file itself. &lt;/p&gt;
&lt;p&gt;So, okay, the programming language maketh not the science. A well-documented codebase is more capable of convincing an
audience of its own utility and accuracy.&lt;/p&gt;&lt;/div&gt;</description><guid>https://thejasvibr.github.io/blog/the_programming_language/</guid><pubDate>Mon, 30 Mar 2020 08:16:00 GMT</pubDate></item></channel></rss>
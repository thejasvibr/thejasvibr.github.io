<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Thejasvi Beleyur (Posts about scientific computing)</title><link>https://example.com/</link><description></description><atom:link href="https://example.com/categories/cat_scientific-computing.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents Â© 2020 &lt;a href="mailto:thejasvib@gmail.com"&gt;Thejasvi Beleyur&lt;/a&gt; </copyright><lastBuildDate>Sat, 11 Apr 2020 06:55:05 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>On the advantages of simultaneous code and docs</title><link>https://example.com/blog/working_with_documentation_on_the_go/</link><dc:creator>Thejasvi Beleyur</dc:creator><description>&lt;div&gt;&lt;p&gt;In the past I always used to either neglect documenting my code properly or ignore it completely. The focus was to get the job done and 
to get out. Nowadays, however, things have changed a &lt;em&gt;lot&lt;/em&gt;, and I really only have the &lt;a href="https://example.com/blog/working_with_documentation_on_the_go/"&gt;Sphinx&lt;/a&gt; project to blame :P. Documenting
your code as it's being written helps in a bunch of ways, and the person who benefits from it the most is future you. I've thanked 
pastme a zillion times by now because the current project I'm working on has grown to be a more than a few modules, and I was 
quite afraid of not being able to keep track of stuff. However, this time I really decided to write &lt;a href="https://example.com/blog/working_with_documentation_on_the_go/"&gt;NumPy&lt;/a&gt; style docstrings 
on all functions that are more than a few lines, and with a little bit of Sphinx magic, and some &lt;a href="https://example.com/blog/working_with_documentation_on_the_go/"&gt;ReadTheDocs&lt;/a&gt; hosting, the
result is a beautiful webpage that  I keep visiting myself just because it's rewarding seeing something beautiful.  It kind of 
reminds me of  the first time I used LaTex to generate a manuscript. &lt;/p&gt;
&lt;p&gt;The problem I tend to have with a code base that gets large enough is that I forget which functions do what and their input formats. 
Even though in the beginning there were only about five functions used commonly, over time, it becomes, seven, ten, fifteen, and that's 
way too many to keep in mind, even though I'm working with the code on a daily basis. This is where having consistent documentation helps 
like crazy at multiple places:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="mi"&gt;1&lt;/span&gt;. &lt;span class="nv"&gt;In&lt;/span&gt; &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;console&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;command&lt;/span&gt; &lt;span class="nv"&gt;line&lt;/span&gt;: &lt;span class="nv"&gt;So&lt;/span&gt; &lt;span class="nv"&gt;you&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;ve begun your coding session, and now you  want to do &amp;lt;&amp;lt;*coolthing*&amp;gt;&amp;gt;, with &amp;lt;&amp;lt;*amazefunction*&amp;gt;&amp;gt;, but, aargh,&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;do you have to specify the &lt;em&gt;amazelevel&lt;/em&gt; or is it a default, and don't you vaguely remember that &lt;em&gt;amazelevel&lt;/em&gt; actually is an input for &amp;lt;&amp;lt;&lt;em&gt;create_amazingness&lt;/em&gt;&amp;gt;&amp;gt;?
So, if past you had done a good job of it, when you  type in &lt;code&gt;help(amazefunction)&lt;/code&gt;, you'd get something like:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;amazefunction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Help&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;amazefunction&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="n"&gt;__main__&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

&lt;span class="n"&gt;amazefunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;amaze_type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;Disappointing?..yeah. Now however, imagine you'd actually invested a minute extra while actually writing this function, and thus saved future you a few minutes. 
This is what the output from &lt;code&gt;help(amazefunction)&lt;/code&gt; could have looked like!&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;Help&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;amazefunction&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="n"&gt;__main__&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

&lt;span class="n"&gt;amazefunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;amaze_type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;Creates&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;amazing&lt;/span&gt; &lt;span class="n"&gt;thing&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; 

    &lt;span class="k"&gt;Parameters&lt;/span&gt;
    &lt;span class="c1"&gt;----------&lt;/span&gt;
    &lt;span class="n"&gt;amaze_type&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt;
        &lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="n"&gt;amazing&lt;/span&gt; &lt;span class="k"&gt;object&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;created&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
        &lt;span class="n"&gt;Possible&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'unicorn'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'rakshasa'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'wolpertinger'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="k"&gt;Returns&lt;/span&gt;
    &lt;span class="c1"&gt;-------&lt;/span&gt;
    &lt;span class="n"&gt;amazingness&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;dictionary&lt;/span&gt;
        &lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;amazingness&lt;/span&gt; &lt;span class="k"&gt;dictionary&lt;/span&gt; &lt;span class="n"&gt;has&lt;/span&gt; &lt;span class="n"&gt;keys&lt;/span&gt;
        &lt;span class="s1"&gt;'height'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'weight'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'powers'&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;  &lt;span class="n"&gt;optional&lt;/span&gt;
        &lt;span class="n"&gt;descriptive&lt;/span&gt; &lt;span class="n"&gt;features&lt;/span&gt; &lt;span class="n"&gt;controlled&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="n"&gt;optional&lt;/span&gt; 
        &lt;span class="n"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

    &lt;span class="n"&gt;See&lt;/span&gt; &lt;span class="n"&gt;Also&lt;/span&gt;
    &lt;span class="c1"&gt;--------&lt;/span&gt;
    &lt;span class="n"&gt;make_amazing_object&lt;/span&gt;
    &lt;span class="n"&gt;check_amaze_type&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description><guid>https://example.com/blog/working_with_documentation_on_the_go/</guid><pubDate>Sat, 04 Apr 2020 06:20:00 GMT</pubDate></item><item><title>To package or not to package?</title><link>https://example.com/blog/thought_on_releasing_a_package/</link><dc:creator>Thejasvi Beleyur</dc:creator><description>&lt;div&gt;&lt;p&gt;After having worked in a field for over a few years, and gotten comfortable with programming in the language of your  choice, you slowly begin to realise
that your work essentially always consists of a set of analyses/tasks which are used again and again. For me, experimentally this means, having scripts ready 
that will initiate recordings, playbacks, and saving of audio files for the experiments I do. In terms of simulations, it means writing a lot of code, typically
based on a bunch of acoustics paradigms that are described by a bunch of equations/assumptions. &lt;/p&gt;
&lt;p&gt;I have of course read over and over again, that it's good practise to bundle all of your goodies into one place, and keep them as a package somewhere [REFS].
But why don't I do it yet? Right now, as an end-phase graduate student, I guess it's mainly because  each time I do this task, I'm not sure when I'll actually
have to do it again. The effort of trying to create a common framework and plan all the basic experimenta/computational tasks to be implemented doesn't pay  off. 
Writing a package, I realise  is as much about the single tiny  functions, as it is about the broad common concept and the sufficiently detailed documentation 
aroud it. If  I'm the only  one who's  going to use  it,  and am not even sure when - it's not worth the time :P. &lt;/p&gt;
&lt;p&gt;Butt, there are cases when I think the code  I've been using regularly is worth putting a decent amount of  thought into and pushing it all the way to a publicly 
available package. Initially  I used to think it's worth putting the effort of making a whole  package and releasing it for public use only if there was a whole community of researchers interested in them. However, this thinking changed when I had the opportunity to  meet Kalle A{dot}stroem, professor at the University of Lund. His group has been developing a package  to automatically calculate microphone positions from sound playbacks. I had approached him in order to check if the package they'd developed could  be used to infer the positions of my microphone arrays I was using to track bats. The package worked for my data, and we thus began of developing an integrated experimental + software workflow for field biologists to  use. While talking about who might be interested in something like this, Kalle mentioned it'd be very cool  even if just two-three labs would  be genuinely  interested in using this whole workflow. This sounded like a very small number to me, two-three labs could basically just consist of four-six people (one PI + one grad student), and back  then I began wondering if this was too niche?&lt;/p&gt;
&lt;p&gt;Nowadays, however, I've realised how niche academic research can be. While we may work on a day-to-day basis with a common set of assummptions and follow the same conceptual principles, each of us has slightly different use cases. Even when one other person benefits from the use of a released package, it should  be considered a success. &lt;/p&gt;
&lt;p&gt;In some sense, the effect of publishing a package is a bit  more tangible  than publishing a paper in a journal. A package  is something that can be used on a day-to-day basis, unlike a paper which is a string of ideas put together. So should you publish your package or  not? Well, the rule of thumb I'm beginning to develop is essentially, if  you  think there's at least one more person who might find it interesting - do it. And remember, the most likely person who  will  find it interesting to use is this familiar-yet-unfamiliar stranger - future  you. &lt;/p&gt;
&lt;p&gt;REFS&lt;/p&gt;&lt;/div&gt;</description><guid>https://example.com/blog/thought_on_releasing_a_package/</guid><pubDate>Wed, 01 Apr 2020 06:30:00 GMT</pubDate></item></channel></rss>